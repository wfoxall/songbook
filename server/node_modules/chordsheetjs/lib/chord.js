"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
exports.parseChord = parseChord;

var _utilities = require("./utilities");

var _key = _interopRequireDefault(require("./key"));

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }

function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }

function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }

function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }

function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); _groups.set(_this, groups || _groups.get(re)); return _setPrototypeOf(_this, BabelRegExp.prototype); } _inherits(BabelRegExp, RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; if (_typeof(args[args.length - 1]) !== "object") { args = [].slice.call(args); args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var MAJOR_SCALE = [null, 'M', 'm', 'm', 'M', 'M', 'm', 'dim'];

function normalizeSuffix(suffix) {
  if (suffix === 'M') {
    return '';
  }

  return suffix;
}

function chordSuffix(noteNumber, suffix) {
  if ((0, _utilities.isEmptyString)(suffix)) {
    var defaultSuffix = MAJOR_SCALE[noteNumber];
    return normalizeSuffix(defaultSuffix);
  }

  return normalizeSuffix(suffix);
}

var chordRegex = /*#__PURE__*/_wrapRegExp(/^([A-G])(#|b)?((?:(?![\t-\r \/\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])[\s\S])*)(\/([A-G])(#|b)?)?$/i, {
  base: 1,
  modifier: 2,
  suffix: 3,
  bassBase: 5,
  bassModifier: 6
});

var numericChordRegex = /*#__PURE__*/_wrapRegExp(/^(#|b)?([1-7])((?:(?![\t-\r \/\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])[\s\S])*)(\/(#|b)?([0-7]))?$/, {
  modifier: 1,
  base: 2,
  suffix: 3,
  bassModifier: 5,
  bassBase: 6
});

var regexes = [numericChordRegex, chordRegex];
/**
 * Represents a Chord, consisting of a root, suffix (quality) and bass
 */

var _rootNote = /*#__PURE__*/new WeakMap();

var _process = /*#__PURE__*/new WeakSet();

var _is = /*#__PURE__*/new WeakSet();

var Chord = /*#__PURE__*/function () {
  function Chord(_ref) {
    var _ref$base = _ref.base,
        base = _ref$base === void 0 ? null : _ref$base,
        _ref$modifier = _ref.modifier,
        modifier = _ref$modifier === void 0 ? null : _ref$modifier,
        _ref$suffix = _ref.suffix,
        suffix = _ref$suffix === void 0 ? null : _ref$suffix,
        _ref$bassBase = _ref.bassBase,
        bassBase = _ref$bassBase === void 0 ? null : _ref$bassBase,
        _ref$bassModifier = _ref.bassModifier,
        bassModifier = _ref$bassModifier === void 0 ? null : _ref$bassModifier,
        _ref$root = _ref.root,
        root = _ref$root === void 0 ? null : _ref$root,
        _ref$bass = _ref.bass,
        bass = _ref$bass === void 0 ? null : _ref$bass;

    _classCallCheck(this, Chord);

    _classPrivateMethodInitSpec(this, _is);

    _classPrivateMethodInitSpec(this, _process);

    _classPrivateFieldInitSpec(this, _rootNote, {
      get: _get_rootNote,
      set: void 0
    });

    this.root = root || new _key["default"]({
      note: base,
      modifier: modifier
    });
    this.suffix = (0, _utilities.presence)(suffix);
    this.bass = bass || (bassBase ? new _key["default"]({
      note: bassBase,
      modifier: bassModifier
    }) : null);
  }

  _createClass(Chord, [{
    key: "clone",
    value:
    /**
     * Returns a deep copy of the chord
     * @returns {Chord}
     */
    function clone() {
      return this.set({});
    }
    /**
     * Converts the chord to a chord symbol, using the supplied key as a reference.
     * For example, a numeric chord `#4` with reference key `E` will return the chord symbol `A#`.
     * When the chord is already a chord symbol, it will return a clone of the object.
     * @param {Key|string} key the reference key
     * @returns {Chord} the chord symbol
     */

  }, {
    key: "toChordSymbol",
    value: function toChordSymbol(key) {
      var _this$bass;

      if (this.isChordSymbol()) {
        return this.clone();
      }

      var keyObj = _key["default"].wrap(key);

      return new Chord({
        suffix: chordSuffix(_classPrivateFieldGet(this, _rootNote), this.suffix),
        root: this.root.toChordSymbol(keyObj),
        bass: (_this$bass = this.bass) === null || _this$bass === void 0 ? void 0 : _this$bass.toChordSymbol(keyObj)
      });
    }
    /**
     * Converts the chord to a chord symbol string, using the supplied key as a reference.
     * For example, a numeric chord `#4` with reference key `E` will return the chord symbol `A#`.
     * When the chord is already a chord symbol, it will return a string version of the chord.
     * @param {Key|string} key the reference key
     * @returns {string} the chord symbol string
     * @see {toChordSymbol}
     */

  }, {
    key: "toChordSymbolString",
    value: function toChordSymbolString(key) {
      return this.toChordSymbol(key).toString();
    }
    /**
     * Determines whether the chord is a chord symbol
     * @returns {boolean}
     */

  }, {
    key: "isChordSymbol",
    value: function isChordSymbol() {
      return _classPrivateMethodGet(this, _is, _is2).call(this, _constants.SYMBOL);
    }
    /**
     * Converts the chord to a numeric chord, using the supplied kye as a reference.
     * For example, a chord symbol A# with reference key E will return the numeric chord #4.
     * @param {Key|string} key the reference key
     * @returns {Chord} the numeric chord
     */

  }, {
    key: "toNumeric",
    value: function toNumeric(key) {
      var _this$bass2;

      if (this.isNumeric()) {
        return this.clone();
      }

      var keyObj = _key["default"].wrap(key);

      return new Chord({
        suffix: chordSuffix(_classPrivateFieldGet(this, _rootNote), this.suffix),
        root: this.root.toNumeric(keyObj),
        bass: (_this$bass2 = this.bass) === null || _this$bass2 === void 0 ? void 0 : _this$bass2.toNumeric(keyObj)
      });
    }
    /**
     * Determines whether the chord is numeric
     * @returns {boolean}
     */

  }, {
    key: "isNumeric",
    value: function isNumeric() {
      return _classPrivateMethodGet(this, _is, _is2).call(this, _constants.NUMERIC);
    }
    /**
     * Converts the chord to a numeric chord string, using the supplied kye as a reference.
     * For example, a chord symbol A# with reference key E will return the numeric chord #4.
     * @param {Key|string} key the reference key
     * @returns {string} the numeric chord string
     * @see {toNumeric}
     */

  }, {
    key: "toNumericString",
    value: function toNumericString(key) {
      return this.toNumeric(key).toString();
    }
    /**
     * Converts the chord to a string, eg `Esus4/G#` or `1sus4/#3`
     * @returns {string} the chord string
     */

  }, {
    key: "toString",
    value: function toString() {
      var chordString = this.root.toString() + (this.suffix || '');

      if (this.bass) {
        return "".concat(chordString, "/").concat(this.bass.toString());
      }

      return chordString;
    }
    /**
     * Normalizes the chord:
     * - Fb becomes E
     * - Cb becomes B
     * - B# becomes C
     * - E# becomes F
     * - 4b becomes 3
     * - 1b becomes 7
     * - 7# becomes 1
     * - 3# becomes 4
     *
     * If the chord is already normalized, this will return a copy.
     * @returns {Chord} the normalized chord
     */

  }, {
    key: "normalize",
    value: function normalize() {
      return _classPrivateMethodGet(this, _process, _process2).call(this, 'normalize');
    }
    /**
     * Switches to the specified modifier
     * @param newModifier the modifier to use: `'#'` or `'b'`
     * @returns {Chord} the new, changed chord
     */

  }, {
    key: "useModifier",
    value: function useModifier(newModifier) {
      return _classPrivateMethodGet(this, _process, _process2).call(this, 'useModifier', newModifier);
    }
    /**
     * Transposes the chord up by 1 semitone. Eg. A becomes A#, Eb becomes E
     * @returns {Chord} the new, transposed chord
     */

  }, {
    key: "transposeUp",
    value: function transposeUp() {
      return _classPrivateMethodGet(this, _process, _process2).call(this, 'transposeUp');
    }
    /**
     * Transposes the chord down by 1 semitone. Eg. A# becomes A, E becomes Eb
     * @returns {Chord} the new, transposed chord
     */

  }, {
    key: "transposeDown",
    value: function transposeDown() {
      return _classPrivateMethodGet(this, _process, _process2).call(this, 'transposeDown');
    }
    /**
     * Transposes the chord by the specified number of semitones
     * @param delta de number of semitones
     * @returns {Chord} the new, transposed chord
     */

  }, {
    key: "transpose",
    value: function transpose(delta) {
      return _classPrivateMethodGet(this, _process, _process2).call(this, 'transpose', delta);
    }
  }, {
    key: "set",
    value: function set(properties) {
      var _this$bass3;

      return new this.constructor(_objectSpread({
        root: this.root.clone(),
        suffix: this.suffix,
        bass: (_this$bass3 = this.bass) === null || _this$bass3 === void 0 ? void 0 : _this$bass3.clone()
      }, properties));
    }
  }], [{
    key: "parse",
    value:
    /**
     * Tries to parse a chord string into a chord
     * @param chordString the chord string, eg `Esus4/G#` or `1sus4/#3`
     * @returns {null|Chord}
     */
    function parse(chordString) {
      for (var i = 0, count = regexes.length; i < count; i += 1) {
        var match = chordString.match(regexes[i]);

        if (match) {
          return new Chord(match.groups);
        }
      }

      return null;
    }
  }]);

  return Chord;
}();
/**
 * Tries to parse a chord string into a chord
 * @param chordString the chord string, eg Esus4/G# or 1sus4/#3
 * @deprecated Please use {@link Chord.parse} instead
 * @returns {null|Chord}
 */


function _get_rootNote() {
  return this.root.note.note;
}

function _process2(func) {
  var arg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  return this.set({
    root: this.root[func](arg),
    bass: this.bass ? this.bass[func](arg) : null
  });
}

function _is2(type) {
  return this.root.is(type) && (!this.bass || this.bass.is(type));
}

function parseChord(chordString) {
  (0, _utilities.deprecate)('parseChord() is deprecated, please use Chord.parse() instead');
  return Chord.parse(chordString);
}

var _default = Chord;
exports["default"] = _default;