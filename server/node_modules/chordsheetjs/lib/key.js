"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _note = _interopRequireDefault(require("./note"));

var _constants = require("./constants");

var _MODIFIER_TRANSPOSITI;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }

function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }

function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }

function _wrapRegExp() { _wrapRegExp = function _wrapRegExp(re, groups) { return new BabelRegExp(re, undefined, groups); }; var _super = RegExp.prototype; var _groups = new WeakMap(); function BabelRegExp(re, flags, groups) { var _this = new RegExp(re, flags); _groups.set(_this, groups || _groups.get(re)); return _setPrototypeOf(_this, BabelRegExp.prototype); } _inherits(BabelRegExp, RegExp); BabelRegExp.prototype.exec = function (str) { var result = _super.exec.call(this, str); if (result) result.groups = buildGroups(result, this); return result; }; BabelRegExp.prototype[Symbol.replace] = function (str, substitution) { if (typeof substitution === "string") { var groups = _groups.get(this); return _super[Symbol.replace].call(this, str, substitution.replace(/\$<([^>]+)>/g, function (_, name) { return "$" + groups[name]; })); } else if (typeof substitution === "function") { var _this = this; return _super[Symbol.replace].call(this, str, function () { var args = arguments; if (_typeof(args[args.length - 1]) !== "object") { args = [].slice.call(args); args.push(buildGroups(args, _this)); } return substitution.apply(this, args); }); } else { return _super[Symbol.replace].call(this, str, substitution); } }; function buildGroups(result, re) { var g = _groups.get(re); return Object.keys(g).reduce(function (groups, name) { groups[name] = result[g[name]]; return groups; }, Object.create(null)); } return _wrapRegExp.apply(this, arguments); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var FLAT = 'b';
var SHARP = '#';
var MODIFIER_TRANSPOSITION = (_MODIFIER_TRANSPOSITI = {}, _defineProperty(_MODIFIER_TRANSPOSITI, SHARP, 1), _defineProperty(_MODIFIER_TRANSPOSITI, FLAT, -1), _MODIFIER_TRANSPOSITI);

var symbolKeyRegex = /*#__PURE__*/_wrapRegExp(/^([A-G])(#|b)?$/i, {
  note: 1,
  modifier: 2
});

var numericKeyRegex = /*#__PURE__*/_wrapRegExp(/^(#|b)?([1-7])$/, {
  modifier: 1,
  note: 2
});

var regexes = [symbolKeyRegex, numericKeyRegex];

var _set = /*#__PURE__*/new WeakSet();

var Key = /*#__PURE__*/function () {
  function Key(_ref) {
    var note = _ref.note,
        _ref$modifier = _ref.modifier,
        modifier = _ref$modifier === void 0 ? null : _ref$modifier;

    _classCallCheck(this, Key);

    _classPrivateMethodInitSpec(this, _set);

    this.note = note instanceof _note["default"] ? note : new _note["default"](note);
    this.modifier = modifier || null;
  }

  _createClass(Key, [{
    key: "distanceTo",
    value: function distanceTo(otherKey) {
      var otherKeyObj = Key.wrap(otherKey);
      var key = this.useModifier(otherKeyObj.modifier);
      var delta = 0;

      while (!key.equals(otherKeyObj) && delta < 20) {
        key = key.transposeUp().useModifier(otherKeyObj.modifier);
        delta += 1;
      }

      return delta;
    }
  }, {
    key: "clone",
    value: function clone() {
      return _classPrivateMethodGet(this, _set, _set2).call(this, {});
    }
  }, {
    key: "toChordSymbol",
    value: function toChordSymbol(key) {
      if (this.is(_constants.SYMBOL)) {
        return this.clone();
      }

      var transposeDistance = this.note.getTransposeDistance() + (MODIFIER_TRANSPOSITION[this.modifier] || 0);
      return key.transpose(transposeDistance).normalize().useModifier(key.modifier);
    }
  }, {
    key: "toChordSymbolString",
    value: function toChordSymbolString(key) {
      return this.toChordSymbol(key).toString();
    }
  }, {
    key: "is",
    value: function is(type) {
      return this.note.is(type);
    }
  }, {
    key: "isNumeric",
    value: function isNumeric() {
      return this.is(_constants.NUMERIC);
    }
  }, {
    key: "isChordSymbol",
    value: function isChordSymbol() {
      return this.is(_constants.SYMBOL);
    }
  }, {
    key: "toNumeric",
    value: function toNumeric(key) {
      if (this.isNumeric()) {
        return this.clone();
      }

      var numericKey = new Key({
        note: 1
      });
      var symbolKey = key.clone();
      var reference = this.clone().normalize().useModifier(key.modifier);

      while (!symbolKey.equals(reference)) {
        numericKey = numericKey.transposeUp().useModifier(key.modifier);
        symbolKey = symbolKey.transposeUp().normalize().useModifier(key.modifier);
      }

      return numericKey;
    }
  }, {
    key: "equals",
    value: function equals(_ref2) {
      var note = _ref2.note,
          modifier = _ref2.modifier;
      return this.note.equals(note) && this.modifier === modifier;
    }
  }, {
    key: "toNumericString",
    value: function toNumericString(key) {
      return this.toNumeric(key).toString();
    }
  }, {
    key: "toString",
    value: function toString() {
      if (this.is(_constants.NUMERIC)) {
        return "".concat(this.modifier || '').concat(this.note);
      }

      return "".concat(this.note).concat(this.modifier || '');
    }
  }, {
    key: "transpose",
    value: function transpose(delta) {
      if (delta === 0) {
        return this;
      }

      var originalModifier = this.modifier;
      var transposedKey = this.clone();
      var func = delta < 0 ? 'transposeDown' : 'transposeUp';

      for (var i = 0, count = Math.abs(delta); i < count; i += 1) {
        transposedKey = transposedKey[func]();
      }

      return transposedKey.useModifier(originalModifier);
    }
  }, {
    key: "transposeUp",
    value: function transposeUp() {
      if (this.modifier === FLAT) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          modifier: null
        });
      }

      if (this.note.isOneOf(3, 7, 'E', 'B')) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.up()
        });
      }

      if (this.modifier === SHARP) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.up(),
          modifier: null
        });
      }

      return _classPrivateMethodGet(this, _set, _set2).call(this, {
        modifier: SHARP
      });
    }
  }, {
    key: "transposeDown",
    value: function transposeDown() {
      if (this.modifier === SHARP) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          modifier: null
        });
      }

      if (this.note.isOneOf(1, 4, 'C', 'F')) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.down()
        });
      }

      if (this.modifier === FLAT) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.down(),
          modifier: null
        });
      }

      return _classPrivateMethodGet(this, _set, _set2).call(this, {
        modifier: FLAT
      });
    }
  }, {
    key: "useModifier",
    value: function useModifier(newModifier) {
      if (this.modifier === FLAT && newModifier === SHARP) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.down(),
          modifier: SHARP
        });
      }

      if (this.modifier === SHARP && newModifier === FLAT) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.up(),
          modifier: FLAT
        });
      }

      return this.clone();
    }
  }, {
    key: "normalize",
    value: function normalize() {
      if (this.modifier === SHARP && this.note.isOneOf(3, 7, 'E', 'B')) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.up(),
          modifier: null
        });
      }

      if (this.modifier === FLAT && this.note.isOneOf(1, 4, 'C', 'F')) {
        return _classPrivateMethodGet(this, _set, _set2).call(this, {
          note: this.note.down(),
          modifier: null
        });
      }

      return this.clone();
    }
  }], [{
    key: "parse",
    value: function parse(keyString) {
      for (var i = 0, count = regexes.length; i < count; i += 1) {
        var match = keyString.match(regexes[i]);

        if (match) {
          return new Key(match.groups);
        }
      }

      return null;
    }
  }, {
    key: "wrap",
    value: function wrap(keyStringOrObject) {
      if (keyStringOrObject instanceof Key) {
        return keyStringOrObject;
      }

      return this.parse(keyStringOrObject);
    }
  }, {
    key: "distance",
    value: function distance(oneKey, otherKey) {
      return this.wrap(oneKey).distanceTo(otherKey);
    }
  }]);

  return Key;
}();

function _set2(attributes) {
  return new this.constructor(_objectSpread({
    note: this.note.clone(),
    modifier: this.modifier
  }, attributes));
}

var _default = Key;
exports["default"] = _default;