"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _constants = require("./constants");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var A = 'A'.charCodeAt(0);
var G = 'G'.charCodeAt(0);
var TRANSPOSE_DISTANCE = [null, 0, 2, 4, 5, 7, 9, 11];

function keyToCharCode(key) {
  return key.toUpperCase().charCodeAt(0);
}

function clamp(note, min, max) {
  var newNote = note;

  if (newNote < min) {
    newNote += 7;
  } else if (newNote > max) {
    newNote -= 7;
  }

  return newNote;
}

var Note = /*#__PURE__*/function () {
  function Note(note) {
    _classCallCheck(this, Note);

    if (/^[A-Ga-g]$/.test(note)) {
      this.note = note.toUpperCase();
      this.type = _constants.SYMBOL;
    } else if (/^[1-7]$/.test(note)) {
      this.note = parseInt(note, 10);
      this.type = _constants.NUMERIC;
    } else {
      throw new Error("Invalid note ".concat(note));
    }
  }

  _createClass(Note, [{
    key: "equals",
    value: function equals(otherNote) {
      return this.note === otherNote.note && this.type === otherNote.type;
    }
  }, {
    key: "clone",
    value: function clone() {
      return new this.constructor(this.note);
    }
  }, {
    key: "up",
    value: function up() {
      return this.change(1);
    }
  }, {
    key: "down",
    value: function down() {
      return this.change(-1);
    }
  }, {
    key: "isOneOf",
    value: function isOneOf() {
      for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {
        options[_key] = arguments[_key];
      }

      return options.includes(this.note);
    }
  }, {
    key: "isNumeric",
    value: function isNumeric() {
      return this.is(_constants.NUMERIC);
    }
  }, {
    key: "isChordSymbol",
    value: function isChordSymbol() {
      return this.is(_constants.SYMBOL);
    }
  }, {
    key: "is",
    value: function is(noteType) {
      return this.type === noteType;
    }
  }, {
    key: "getTransposeDistance",
    value: function getTransposeDistance() {
      return TRANSPOSE_DISTANCE[this.note];
    }
  }, {
    key: "change",
    value: function change(delta) {
      if (this.isNumeric()) {
        var newNote = clamp(this.note + delta, 1, 7);

        if (newNote < 1) {
          newNote += 7;
        } else if (newNote > 7) {
          newNote -= 7;
        }

        return new Note(newNote);
      }

      var charCode;
      charCode = keyToCharCode(this.note);
      charCode += delta;
      charCode = clamp(charCode, A, G);
      return new Note(String.fromCharCode(charCode));
    }
  }, {
    key: "toString",
    value: function toString() {
      return "".concat(this.note);
    }
  }]);

  return Note;
}();

var _default = Note;
exports["default"] = _default;